// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "generated"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id             String   @id @default(cuid())
  name           String?
  username       String?  @unique
  email          String?  @unique
  emailVerified  Boolean? @default(false) // For email verification
  image          String?
  hashedPassword String? // For email/password login
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  // Custom fields for your app
  stripeAccountId String? @unique // Stores the connected Stripe Standard account ID for Creators
  creatorName     String? @unique // For the subpath URL: yourplatform.com/creatorName

  products  Product[] // Products created by this user (if they are a creator)
  purchases Purchase[] // Products purchased by this user (if they are a customer)
  comments  Comment[] // Comments made by this user
}

// Add your other models as you progress, for now just User, Account, Session
model Product {
  id              String   @id @default(cuid())
  name            String
  description     String   @db.Text
  price           Decimal  @db.Decimal(10, 2) // Precision and scale
  displayImageUrl String   @db.Text
  digitalFileUrl  String   @db.Text // Private S3 URL
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creatorId       String // Link to the User who created it
  categoryId      String // Link to the Category

  creator   User       @relation(fields: [creatorId], references: [id])
  category  Category   @relation(fields: [categoryId], references: [id])
  purchases Purchase[]
  comments  Comment[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Purchase {
  id                      String  @id @default(cuid())
  userId                  String
  productId               String
  creatorId               String // Denormalized for easier query
  amountPaid              Decimal @db.Decimal(10, 2)
  stripeCheckoutSessionId String  @unique
  stripePaymentIntentId   String? // Nullable if not always available or needed

  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Comment {
  id            String   @id @default(cuid())
  productId     String
  userId        String
  content       String   @db.Text
  createdAt     DateTime @default(now())
  numberOfLikes Int      @default(0) // Limit likes to prevent abuse

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}
